// MARK: - RoleManager.swift
import FirebaseFirestore
import FirebaseAuth
import Foundation
import Combine

class RoleManager: ObservableObject {
    @Published var currentUser: UserModel?
    @Published var isLoadingUser = false
    @Published var errorMessage: String?
    
    private let db = Firestore.firestore()
    
    func fetchUserRole(for uid: String) {
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å UID: \(uid)")
        
        isLoadingUser = true
        errorMessage = nil
        
        db.collection("users")
            .whereField("uid", isEqualTo: uid)
            .getDocuments { [weak self] snapshot, error in
                DispatchQueue.main.async {
                    self?.isLoadingUser = false
                    
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ Firestore: \(error.localizedDescription)")
                        self?.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error.localizedDescription)"
                        return
                    }
                    
                    guard let documents = snapshot?.documents else {
                        print("‚ùå Snapshot is nil")
                        self?.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"
                        return
                    }
                    
                    print("üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: \(documents.count)")
                    
                    if documents.isEmpty {
                        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users")
                        self?.errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        return
                    }
                    
                    do {
                        let userData = documents[0].data()
                        print("üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(userData)")
                        
                        let user = try Firestore.Decoder().decode(UserModel.self, from: userData)
                        self?.currentUser = user
                        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(user.displayName) (\(user.role.displayName))")
                        
                    } catch {
                        print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
                        
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
                        if let userData = documents.first?.data() {
                            self?.handleDecodingError(userData: userData, uid: uid)
                        } else {
                            self?.errorMessage = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error.localizedDescription)"
                        }
                    }
                }
            }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ø—ã—Ç–∫–æ–π —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    private func handleDecodingError(userData: [String: Any], uid: String) {
        print("üîß –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö: \(userData)")
        
        guard let email = userData["email"] as? String,
              let displayName = userData["displayName"] as? String,
              let roleString = userData["role"] as? String,
              let role = UserRole(rawValue: roleString),
              let isActive = userData["isActive"] as? Bool else {
            
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            self.errorMessage = "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ"
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
        let user = UserModel(
            id: nil,
            email: email,
            displayName: displayName,
            role: role,
            warehouseId: userData["warehouseId"] as? String,
            uid: uid,
            isActive: isActive,
            createdAt: (userData["createdAt"] as? Timestamp)?.dateValue() ?? Date(),
            updatedAt: (userData["updatedAt"] as? Timestamp)?.dateValue() ?? Date()
        )
        
        self.currentUser = user
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é: \(user.displayName) (\(user.role.displayName))")
    }
    
    func clearCurrentUser() {
        print("üßπ –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        currentUser = nil
        errorMessage = nil
        isLoadingUser = false
    }
}
